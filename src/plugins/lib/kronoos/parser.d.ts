export default class KronoosParse {
    static getDatabase(query: any): string;
    constructor(controller: any, depth: any, name: any, cpf_cnpj: any, kronoosData: any, ccbuscaData?: any, defaultType?: string, parameters?: {}, brief?: any);
    stats: any;
    depth: any;
    networkData: any;
    uniqid: string;
    parameters: {};
    name: any;
    otherNames: any[];
    controller: any;
    kelements: any[];
    procElements: {};
    cpf_cnpjs: {};
    xhr: any[];
    homonymous: any;
    kronoosData: any;
    ccbuscaData: any;
    runningXhr: number;
    titleCanChange: boolean;
    geocodes: any[];
    resourceUse: number;
    responses: any[];
    runOnEnd: any[];
    confirmQueue: any;
    cpf: any;
    cpf_cnpj: any;
    cnpj: any;
    appendElement: JQuery<HTMLElement>;
    readonly brief: any;
    openReceipt(htmlNode: any): void;
    openReceipts(xml: any): void;
    findOtherNames(onComplete: any): void;
    call(...args: any[]): any;
    isRunning(): boolean;
    serverCall(query: any, conf: any, priority?: any): void;
    finishTimeout: NodeJS.Timer | undefined;
    loader(...args: any[]): any;
    errorHappen(group: any, groupMessage: any, errorMessage?: any, errorLimit?: number): void;
    _errorHappendObject: {
        paragraph: string;
    } | undefined;
    _errorHappendList: any;
    _errorHappendGroupElement: {} | undefined;
    _errorHappendErrorElements: {} | undefined;
    notFound(element: any, group: any, ...args: any[]): any;
    _notFoundObject: {} | null | undefined;
    _notFoundList: any;
    _notFoundRows: {} | undefined;
    _notFoundItems: any[] | undefined;
    notFoundAdm(e: any, ...args: any[]): any;
    notFoundCredito(e: any, ...args: any[]): any;
    notFoundJuridic(e: any, ...args: any[]): any;
    notFoundOthers(e: any, ...args: any[]): any;
    searchDtec(): void;
    searchCertidaoPDF(arr: any): void;
    searchMPT(): void;
    mptSync: any;
    searchSerasa(): void;
    errorHappenQuery(query: any, errorMessage: any, alternative?: string, groupMessage?: any, limit?: number): void;
    tribunalSearch(n: any, callback: any): void;
    searchTribunais(): void;
    tribunaisSync: any;
    searchComprot(): void;
    searchTJSPCertidaoPDF(tipo: any, pedido: any, data: any): void;
    searchTJSPCertidaoFisica(): void;
    cognitiveParser(): void;
    cognitiveDossier: CognitiveDossier | undefined;
    searchPepCoaf(): void;
    searchPep(): void;
    searchCRF(): void;
    searchReporterBrasil(): void;
    searchTJSPCertidao(): void;
    searchAll(): void;
    generateRelations: any;
    searchJuridic(): void;
    searchBureau(): void;
    buy(title: any, ammount: any, action: any): void;
    adicionalInformation: any;
    cbuscaMae(): void;
    mae: string | undefined;
    nascimento: any;
    searchCrawler(): void;
    cbuscaTelefone(): void;
    end(): void;
    juristekInfoNotFound(): void;
    cbuscaEmpregos(): void;
    groupElement(): any;
    grouElements: any;
    cbuscaEnderecos(): void;
    showCBusca(ccbuscaData?: any): void;
    searchCNPJSocio(): void;
    searchBovespa(): void;
    searchDAU(): void;
    searchCNDT(): void;
    searchIbama(): void;
    searchCNJImprobidade(): void;
    searchMTE(): void;
    searchProtestos(): void;
    searchCCF(): void;
    searchCnep(): void;
    searchExpulsoes(): void;
    searchCepim(): void;
    searchJucespNire(nire: any): void;
    searchJucesp(name: any): void;
    searchCertidao(nascimento?: any, cpf_cnpj?: any): void;
    informationQA(): {};
    changeResult(): void;
    _brief: any;
    _briefElement: any;
    firstElement(): any;
    kronoosElement(group: any, ...args: any[]): any;
    searchCeis(): void;
    searchMandado(idLog: any, numeroMandado: any): void;
    searchMandados(): void;
    downloadMarkdown(): void;
    printData(): {
        template: string;
        data: string;
    };
    generateZip(blobCallback: any): void;
    downloadPDF(): void;
    downloadXLSX(): void;
    downloadXLSXEmail(): void;
    downloadDOCX(): void;
    downloadImage(): void;
    generateHeader(defaultType?: string): void;
    header: {
        container: JQuery<HTMLElement>;
        content: JQuery<HTMLElement>;
        element: JQuery<HTMLElement>;
        actions: JQuery<HTMLElement>;
        title: JQuery<HTMLElement>;
        subtitle: JQuery<HTMLElement>;
    } | undefined;
    confirm(...args: any[]): void;
    alert(...args: any[]): void;
    parseKronoos(kronoosData: any): void;
    parseProc(proc: any, article: any, match: any): boolean;
    jucespQuery(name: any, callback: any, cpf_cnpj: any): void;
    query(query: any, cpf_cnpj: any, elements: any, sideQuest?: any): void;
    emptyChecker(): void;
    kill(): void;
    graphTrack(): void;
    taskGraphTrack: any;
    taskGraphParallel: any;
    writeNetworkTable(): void;
    errorAjax(...args: any[]): any;
    searchCARFDocumento(): void;
    searchTjceDocument(): void;
    searchTjce(): void;
    searchTjspDocument(): void;
    searchTjsp(): void;
    jusSearch(): void;
    juristek(jusSearch: any, name: any): void;
    completeName(matches: any, data: any, direction?: number): boolean;
    testMatch(nameRow: any, data: any): number[];
    compareNames(name: any): boolean;
    normalizeJuristek(cnj: any): void;
    normalizeName(name: any): string;
    juristekInfo(callback: any): any;
    juristekDetectCNJ(cnj: any, callback: any): any;
    juristekDetectCNJWithData(callback: any, juristekInfo: any, couldBeJTR: any): any;
    juristekCNJ(ret: any, cnj?: any, findProc?: boolean, nameSearch?: boolean, checkName?: boolean): void;
    _juristekCNJ(ret: any, cnj?: any, findProc?: boolean, nameSearch?: boolean, checkName?: boolean): void;
    cartesian(...args: any[]): any[];
    append(...args: any[]): JQuery<HTMLElement>;
    verifierDigit(numbers: any): number;
}
import { CognitiveDossier } from "./cognitive-dossier";
